import pandas as pd
import numpy as np
import sklearn as sk
from sklearn.externals import joblib
from sklearn import metrics, datasets
from sklearn.ensemble import RandomForestRegressor
from sklearn.datasets import make_regression
from sklearn.linear_model import LogisticRegression
#import Tkinter as Tk

import tkinter as tk 
from tkinter import *
r = tk.Tk() 
r.configure(background="cyan")
r.title('RainFall Predict') 
Label(r, text='Temp High',bg='cyan').grid(row=0) 
Label(r, text='Temp Avg',bg='cyan').grid(row=1)
Label(r, text='Temp High',bg='cyan').grid(row=2) 
Label(r, text='DewPoint High',bg='cyan').grid(row=3) 
Label(r, text='DewPoint Avg',bg='cyan').grid(row=4) 
Label(r, text='DewPoint Low',bg='cyan').grid(row=5) 
Label(r, text='HumidityHigh%',bg='cyan').grid(row=6) 
Label(r, text='HumidityAvg%',bg='cyan').grid(row=7)  
Label(r, text='HumidityLow%',bg='cyan').grid(row=8) 
Label(r, text='SeaLevelPressureAvg',bg='cyan').grid(row=9) 
Label(r, text='VisiblityHigh',bg='cyan').grid(row=10) 
Label(r, text='VisiblityAvg',bg='cyan').grid(row=11) 
Label(r, text='VisiblityLow',bg='cyan').grid(row=12) 
Label(r, text='WindSpeedHigh',bg='cyan').grid(row=13) 
Label(r, text='WindSpeedAvg',bg='cyan').grid(row=14) 
Label(r, text='WindSpeedLow',bg='cyan').grid(row=15)
Label(r, text='',bg='cyan').grid(row=17)
Label(r, text='',bg='cyan').grid(row=18)
e1 = Entry(r,bg='cyan') 
e2 = Entry(r,bg='cyan') 
e3 = Entry(r,bg='cyan') 
e4 = Entry(r,bg='cyan') 
e5 = Entry(r,bg='cyan') 
e6 = Entry(r,bg='cyan') 
e7 = Entry(r,bg='cyan') 
e8 = Entry(r,bg='cyan') 
e9 = Entry(r,bg='cyan') 
e10 = Entry(r,bg='cyan') 
e11 = Entry(r,bg='cyan') 
e12 = Entry(r,bg='cyan') 
e13 = Entry(r,bg='cyan') 
e14 = Entry(r,bg='cyan') 
e15 = Entry(r,bg='cyan') 
e16 = Entry(r,bg='cyan') 
e17= Entry(r,bg='cyan')  
e1.grid(row=0, column=1) 
e2.grid(row=1, column=1) 
e3.grid(row=2, column=1) 
e4.grid(row=3, column=1) 
e5.grid(row=4, column=1) 
e6.grid(row=5, column=1) 
e7.grid(row=6, column=1) 
e8.grid(row=7, column=1) 
e9.grid(row=8, column=1) 
e10.grid(row=9, column=1) 
e11.grid(row=10, column=1) 
e12.grid(row=11, column=1) 
e13.grid(row=12, column=1) 
e14.grid(row=13, column=1) 
e15.grid(row=14, column=1) 
e16.grid(row=15, column=1) 
button = tk.Button(r, text='Predict', width=25,bg='yellow',command=lambda:retrieve_input())
button.grid(row=19,column=1)
#button.pack() 
def popupmsg(msg):
    popup = tk.Tk()
    popup.wm_title("!")
    label = tk.Label(popup, text= msg)
    label.pack(side="top", fill="x", pady=10)
    B1 = tk.Button(popup, text="Okay", command = popup.destroy)
    B1.pack()
    popup.mainloop()
def retrieve_input():
	in1=int(e1.get())
	in2=int(e2.get())
	in3=int(e3.get())
	in4=int(e4.get())
	in5=int(e5.get())
	in6=int(e6.get())
	in7=int(e7.get())
	in8=int(e8.get())
	in9=int(e9.get())
	in10=int(e10.get())
	in11=int(e11.get())
	in12=int(e12.get())
	in13=int(e13.get())
	in14=int(e14.get())
	in15=int(e15.get())
	in16=int(e16.get())
	classes = ['None', 'No Rain,No need to worry', 'Drizzles,carry your umberella,', 'Moderate Rains,you may need a raincoat', 'Heavy Rains,Alert!!']
	clf = joblib.load('weights1.joblib')
	input = np.array([[76], [74], [71], [73], [72], [70], [100], [97], [93], [30], [10], [5], [1], [7], [2], [12]])
	input1 = np.array([[in1], [in2], [in3], [in4], [in5], [in6], [in7], [in8], [in9], [in10], [in11], [in12], [in13], [in14], [in15], [in16]])
	input = input.reshape(1, -1)
	input1=input1.reshape(1, -1)
	popupmsg(classes[int(clf.predict(input1))])
r.mainloop()
#prediction
#print(classes[int(clf.predict(input1))])
